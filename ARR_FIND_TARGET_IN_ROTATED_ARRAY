#include <bits/stdc++.h>
using namespace std;

int pivotedSearch(vector<int>& arr, int key) {
  
    // Initialize two pointers, low and high, at the start
    // and end of the array.
    int low = 0, high = arr.size() - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        // Case 1: Find key
        if (arr[mid] == key)
            return mid;

        // Case 2: Left half is sorted
        if (arr[mid] >= arr[low]) {
          
            // If the key lies within this sorted half,
            // move the high pointer to mid - 1.
            if (key >= arr[low] && key < arr[mid])
                high = mid - 1;
          
            // Otherwise, move the low pointer to mid + 1.
            else
                low = mid + 1;
        }
      
        // Case 3: Right half is sorted
        else {
          
            // If the key lies within this sorted half,
            // move the low pointer to mid + 1.
            if (key > arr[mid] && key <= arr[high])
                low = mid + 1;
          
            // Otherwise, move the high pointer to mid - 1.
            else
                high = mid - 1;
        }
    }

    return -1; // Key not found
}

// Driver code
int main() {
    vector<int> arr1 = {9,10,11,12,13,14};
    int key1 = 12;
    int result1 = pivotedSearch(arr1, key1);
    cout << result1 << endl; // Output: 4

    vector<int> arr2 = {4, 5, 6, 7, 0, 1, 2};
    int key2 = 3;
    int result2 = pivotedSearch(arr2, key2);
    cout << result2 << endl; // Output: -1

    return 0;
}
