// Online C++ compiler to run C++ program online
// Online C compiler to run C program online
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <iostream>
#include <queue>
#include <math.h>
#include <map>


using namespace std;

typedef struct TreeNode TreeNode_t;

queue<TreeNode_t *> node_q;

struct TreeNode {
   int value;
   int dir;
   TreeNode_t *left;
   TreeNode_t *right;
};

map<int, int> bt_index_value; 

void levelOrdTrav (TreeNode_t *root) {
     node_q.push(root);
     while(!node_q.empty()) {
         TreeNode_t *node = node_q.front();
         node_q.pop();
         printf(" %d ",node->value);
         if(node->left != NULL) 
             node_q.push(node->left); 
         if(node->right != NULL)
             node_q.push(node->right);
     }
     printf("\n");
} 

void distanceFromMid (TreeNode_t *node) {
     int non_zero = 0;
     int level = 0;
   
     if(node != NULL) {
        non_zero = 1;
        node_q.push(node);
     } else {
         return;
     }
       
    while(non_zero) {
        int count = pow(2,level);
        int temp_count = count;
        non_zero = 0;
        while (count) {
            TreeNode_t *node = node_q.front();
            node_q.pop();
            if(node == NULL) {
                node_q.push(NULL);
                node_q.push(NULL);
            }
            else {
                if(node->left != NULL) 
                    node->left->dir = node->dir - 1;
                if(node->right != NULL) 
                    node->right->dir = node->dir + 1;
                node_q.push(node->left);
                node_q.push(node->right);
                non_zero += 1;
                bt_index_value[node->dir] = node->value;
                //printf("index %d count %d\n",node->dir,node->value);
            }
            count --;
        }
        level++;
    }    
} 

TreeNode_t * addNode(TreeNode_t *node, uint32_t value) {
    if(value == node->value)
        return node;
    if(value < node->value) {
             if(node->left==NULL) {
                node->left = (TreeNode_t *) malloc(sizeof(TreeNode_t));
                node = node->left;
                node->value = value;
                node->left = NULL;
                node->right = NULL;
                return node;
             } else {
                node = node->left;
             }
    }
    else if(value > node->value) {
             if(node->right==NULL) {
                node->right = (TreeNode_t *) malloc(sizeof(TreeNode_t));
                node = node->right;
                node->value = value;
                node->left = NULL;
                node->right = NULL;
                return node;
             } else {
                node = node->right;
             }   
    }
    addNode(node, value);
}

int main() {
    // Write C code here
    printf("Try programiz.pro");
    TreeNode_t *node = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->value = 20;
    node->left = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->right = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->left->value = 8;
    node->right->value = 22;
    node->left->left = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->left->right = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->right->left = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->right->right = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->left->left->value = 5;
    node->left->right->value = 3;
    node->right->left->value = 4;
    node->right->right->value = 25;
    node->left->right->left = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->left->right->left->value = 10;
    node->right->left->right = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->right->left->right->value = 14;
    
    
    levelOrdTrav(node);
    distanceFromMid(node);

    for (auto a : bt_index_value) {
        cout << "Key: " << a.first <<
        ", values: " << a.second << endl;
    }
    
    return 0;
}
