// Online C++ compiler to run C++ program online
// Online C compiler to run C program online
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <iostream>
#include <queue>
#include <math.h>

using namespace std;

typedef struct TreeNode TreeNode_t;

queue<TreeNode_t *> node_q;

struct TreeNode {
   uint32_t value;
   TreeNode_t *left;
   TreeNode_t *right;
 };

uint32_t largestDiameter(TreeNode_t *node, int &d) {
    if(node == NULL) 
        return 0;
    
    int lHeight = largestDiameter(node->left,d);
    int rHeight = largestDiameter(node->right,d);  
    
    d = max(d,lHeight+rHeight);
    return 1 + max(lHeight,rHeight);
    
}

TreeNode_t * addNode(TreeNode_t *node, uint32_t value) {
    if(value == node->value)
        return node;
    if(value < node->value) {
             if(node->left==NULL) {
                node->left = (TreeNode_t *) malloc(sizeof(TreeNode_t));
                node = node->left;
                node->value = value;
                node->left = NULL;
                node->right = NULL;
                return node;
             } else {
                node = node->left;
             }
    }
    else if(value > node->value) {
             if(node->right==NULL) {
                node->right = (TreeNode_t *) malloc(sizeof(TreeNode_t));
                node = node->right;
                node->value = value;
                node->left = NULL;
                node->right = NULL;
                return node;
             } else {
                node = node->right;
             }   
    }
    addNode(node, value);
}

int main() {
    // Write C code here
    TreeNode_t *node = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->value = 50;
    node->left = NULL;
    node->right = NULL;

    addNode(node,6);
    addNode(node,83);
    addNode(node,53);
        addNode(node,85);
addNode(node,3);
    addNode(node,23);
        addNode(node,52);
    addNode(node,65);
        addNode(node,87);
    addNode(node,84);


    /*addNode(node,3);
    addNode(node,4);
    addNode(node,23);
    addNode(node,53);
    addNode(node,54);
    addNode(node,85);
    addNode(node,81);
    addNode(node,2);addNode(node,22);*///addNode(node,24);
    int d;
    uint32_t h = largestDiameter(node,d);
    printf(" Height %d Diameter %d",h,d);

    return 0;
    
}
