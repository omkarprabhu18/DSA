// Online C++ compiler to run C++ program online
// Online C compiler to run C program online
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <iostream>
#include <queue>
#include <math.h>

using namespace std;

typedef struct TreeNode TreeNode_t;

queue<TreeNode_t *> node_q;

struct TreeNode {
   uint32_t value;
   TreeNode_t *left;
   TreeNode_t *right;
 };

TreeNode_t* least_common_node (TreeNode_t *node, int value1,int value2) {
    if(node == NULL) {
        return NULL;
    }
    if(node->value == value1 || node->value == value2)
       return node;
    else {
        TreeNode_t* r = least_common_node(node->right,value1,value2);
        TreeNode_t* l = least_common_node(node->left,value1,value2);
        
        if (l != NULL && r != NULL) 
            return node;     
        if(l != NULL)
            return l;
        if(r != NULL)
            return r;
    }
}

TreeNode_t * addNode(TreeNode_t *node, uint32_t value) {
    if(value == node->value)
        return node;
    if(value < node->value) {
             if(node->left==NULL) {
                node->left = (TreeNode_t *) malloc(sizeof(TreeNode_t));
                node = node->left;
                node->value = value;
                node->left = NULL;
                node->right = NULL;
                return node;
             } else {
                node = node->left;
             }
    }
    else if(value > node->value) {
             if(node->right==NULL) {
                node->right = (TreeNode_t *) malloc(sizeof(TreeNode_t));
                node = node->right;
                node->value = value;
                node->left = NULL;
                node->right = NULL;
                return node;
             } else {
                node = node->right;
             }   
    }
    addNode(node, value);
}

int main() {
    // Write C code here
    printf("Try programiz.pro");
    TreeNode_t *node = (TreeNode_t *) malloc(sizeof(TreeNode_t));
    node->value = 50;
    node->left = NULL;
    node->right = NULL;

    addNode(node,6);
    addNode(node,83);
    addNode(node,3);
    addNode(node,4);
    addNode(node,23);
    addNode(node,53);
    addNode(node,54);
    addNode(node,85);
    addNode(node,81);
    addNode(node,2);addNode(node,22);//addNode(node,24);

    TreeNode_t* h = least_common_node(node,4,85);
    printf("Height %d",h->value);

    return 0;
    
}
